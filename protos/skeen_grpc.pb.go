// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SkeenClient is the client API for Skeen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SkeenClient interface {
	JoinNode(ctx context.Context, in *JoinNodeRequest, opts ...grpc.CallOption) (*JoinNodeResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Any, error)
	SendStamppedMessage(ctx context.Context, in *SendStamppedMessageRequest, opts ...grpc.CallOption) (*Any, error)
}

type skeenClient struct {
	cc grpc.ClientConnInterface
}

func NewSkeenClient(cc grpc.ClientConnInterface) SkeenClient {
	return &skeenClient{cc}
}

func (c *skeenClient) JoinNode(ctx context.Context, in *JoinNodeRequest, opts ...grpc.CallOption) (*JoinNodeResponse, error) {
	out := new(JoinNodeResponse)
	err := c.cc.Invoke(ctx, "/protos.Skeen/JoinNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skeenClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Any, error) {
	out := new(Any)
	err := c.cc.Invoke(ctx, "/protos.Skeen/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skeenClient) SendStamppedMessage(ctx context.Context, in *SendStamppedMessageRequest, opts ...grpc.CallOption) (*Any, error) {
	out := new(Any)
	err := c.cc.Invoke(ctx, "/protos.Skeen/SendStamppedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkeenServer is the server API for Skeen service.
// All implementations must embed UnimplementedSkeenServer
// for forward compatibility
type SkeenServer interface {
	JoinNode(context.Context, *JoinNodeRequest) (*JoinNodeResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*Any, error)
	SendStamppedMessage(context.Context, *SendStamppedMessageRequest) (*Any, error)
	mustEmbedUnimplementedSkeenServer()
}

// UnimplementedSkeenServer must be embedded to have forward compatible implementations.
type UnimplementedSkeenServer struct {
}

func (UnimplementedSkeenServer) JoinNode(context.Context, *JoinNodeRequest) (*JoinNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinNode not implemented")
}
func (UnimplementedSkeenServer) SendMessage(context.Context, *SendMessageRequest) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedSkeenServer) SendStamppedMessage(context.Context, *SendStamppedMessageRequest) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStamppedMessage not implemented")
}
func (UnimplementedSkeenServer) mustEmbedUnimplementedSkeenServer() {}

// UnsafeSkeenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SkeenServer will
// result in compilation errors.
type UnsafeSkeenServer interface {
	mustEmbedUnimplementedSkeenServer()
}

func RegisterSkeenServer(s grpc.ServiceRegistrar, srv SkeenServer) {
	s.RegisterService(&Skeen_ServiceDesc, srv)
}

func _Skeen_JoinNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkeenServer).JoinNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Skeen/JoinNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkeenServer).JoinNode(ctx, req.(*JoinNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Skeen_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkeenServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Skeen/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkeenServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Skeen_SendStamppedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendStamppedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkeenServer).SendStamppedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Skeen/SendStamppedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkeenServer).SendStamppedMessage(ctx, req.(*SendStamppedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Skeen_ServiceDesc is the grpc.ServiceDesc for Skeen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Skeen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Skeen",
	HandlerType: (*SkeenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinNode",
			Handler:    _Skeen_JoinNode_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Skeen_SendMessage_Handler,
		},
		{
			MethodName: "SendStamppedMessage",
			Handler:    _Skeen_SendStamppedMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/skeen.proto",
}
